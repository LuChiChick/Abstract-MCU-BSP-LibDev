#include "Abs_Monochrome_Screen.hpp"
#include "stddef.h"
#include "stdarg.h"

namespace cus
{
    //默认构造函数
    Abs_Monochrome_Screen::Abs_Monochrome_Screen()
    {
        //字体族相关设置
        font_Family = (const uint8_t *)Monochrome_Screen_Resources::ASCII_0806;
        Font_PosWidth = 8;
        Font_PosLength = 6;
        //屏幕输出指针设置
        cursor_X = 0;
        cursor_Y = 0;
        //缓冲区设置
        isFullBuffer = false;
        buffer = NULL;
        //像素点相关设置
        Pixel_Color_Reverse = false;
        Pixel_Overlay = false;

        //未正确初始化
        isInit_already = false;
        // SCREEN_X 信息初始化;
        // SCREEN_Y 信息初始化;
    }

    /**
     * 设置字体族
     * @param font_Family 字体族数据组指针地址
     * @return Monochrome_Screen_Error错误异常抛出
     */
    Monochrome_Screen_Error Abs_Monochrome_Screen::set_Font_Family(uint8_t *font_Family)
    {
        //返回功能未实现
        return MONOCHROME_SCREEN_ERROR_FUNCTION_UNREALIZED;
    }

    /**
     * 反转像素颜色
     * @param false_for_Normal_true_for_Revers false正常像素点true反色像素点
     * @return Monochrome_Screen_Error错误异常抛出
     */
    Monochrome_Screen_Error Abs_Monochrome_Screen::reverse_Pixel_Color(bool false_for_Normal_true_for_Revers)
    {
        //记录笔刷切换与否
        Pixel_Color_Reverse = false_for_Normal_true_for_Revers;
        //返回无错误
        return MONOCHROME_SCREEN_ERROR_NONE;
    }

    /**
     * 输出一个字节数据
     * @param chr 需要输出的字节数据
     * @return IO_Stream_Error异常抛出
     */
    IO_Stream_Error Abs_Monochrome_Screen::putchar(const char chr)
    {
        //管理内部指针以实现控制台输出，所有的输出及缓存工作全部嫁接交给putchar_at
        //更新cursor_X及cursor_Y时应该考虑到越界的问题

        //处理空字符
        if (chr == '\0')
            return IO_STREAM_ERROR_NONE;

        //处理换行符
        if (chr == '\n')
        {
            //正好指针越界，屏幕滚动字体宽度单位像素
            if (cursor_Y + Font_PosWidth >= SCREEN_Y)
            {
                if (screenRoll(Font_PosWidth) != MONOCHROME_SCREEN_ERROR_NONE)
                    return IO_STREAM_ERROR_IMPLEMENT_LAYER_FAILD;
            }
            else
            {
                //记录换行符并换行
                save_Char_To_Buffer(cursor_X, cursor_Y, chr);
                cursor_Y += Font_PosWidth;
            }

            // x指针清零
            cursor_X = 0;
            return IO_STREAM_ERROR_NONE;
        }
        else
        {
            //检查当前行是否还可以容纳字符
            if (cursor_X + Font_PosLength < SCREEN_X)
            {
                //输出字符
                if (putchar_at(cursor_X, cursor_Y, chr) != MONOCHROME_SCREEN_ERROR_NONE)
                    return IO_STREAM_ERROR_IMPLEMENT_LAYER_FAILD;
                //缓存输出字符
                save_Char_To_Buffer(cursor_X, cursor_Y, chr);
                //更新指针，返回
                cursor_X += Font_PosLength;
                return IO_STREAM_ERROR_NONE;
            }
            else
            {
                //递归换行
                if (putchar('\n') != IO_STREAM_ERROR_NONE)
                    return IO_STREAM_ERROR_IMPLEMENT_LAYER_FAILD;

                //递归打印目标字符
                return putchar(chr);
            }
        }
    }

    /**
     * 指定坐标打印字符
     * @param x_offest x坐标
     * @param y_offest y坐标
     * @param chr 输出字符
     * @return Monochrome_Screen_Error错误异常抛出
     */
    Monochrome_Screen_Error Abs_Monochrome_Screen::putchar_at(uint16_t x_offest, uint16_t y_offest, const char chr)
    {
        //越界审查
        if (x_offest >= SCREEN_X)
            return MONOCHROME_SCREEN_ERROR_OUT_OF_RANGE_X;
        if (y_offest >= SCREEN_Y)
            return MONOCHROME_SCREEN_ERROR_OUT_OF_RANGE_Y;

        //在指定位置输出字符图像
        return draw_IMG_at(cursor_X, cursor_Y, Font_PosLength, Font_PosWidth, &font_Family[chr - ' ']);
    }

    /**
     * 向默认位置(0,0)绘制图形
     * @param length 图片像素长度
     * @param width 图片像素宽度
     * @param IMG_Arr 图片数组,每列8位点阵,字节垂直数据水平
     * @return Monochrome_Screen_Error错误异常抛出
     */
    Monochrome_Screen_Error Abs_Monochrome_Screen::draw_IMG(uint16_t length, uint16_t width, const uint8_t *IMG_Arr)
    {
        //换行输出到下行首
        if (putchar('\n') != IO_STREAM_ERROR_NONE)
            return MONOCHROME_SCREEN_ERROR_OUTSTREAM_FAILED;

        return draw_IMG_at(cursor_X, cursor_Y, length, width, IMG_Arr);
    }

    /**
     * 全页滚动屏幕
     * @param pos_count 滚动像素点计数
     * @return SSD1306_Error异常抛出
     */
    Monochrome_Screen_Error Abs_Monochrome_Screen::screenRoll(uint16_t pos_count)
    {
        // temp
        return MONOCHROME_SCREEN_ERROR_NONE;
    }
}

//单色屏资源区，字体及图像
namespace Monochrome_Screen_Resources
{
    //字节垂直，数据水平，标准ASCII字符6*8点阵，数据高位在点阵下方
    const uint8_t ASCII_0806[92][6] = {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // sp
        {0x00, 0x00, 0x00, 0x2f, 0x00, 0x00}, // !
        {0x00, 0x00, 0x07, 0x00, 0x07, 0x00}, // "
        {0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
        {0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12}, // $
        {0x00, 0x62, 0x64, 0x08, 0x13, 0x23}, // %
        {0x00, 0x36, 0x49, 0x55, 0x22, 0x50}, // &
        {0x00, 0x00, 0x05, 0x03, 0x00, 0x00}, // '
        {0x00, 0x00, 0x1c, 0x22, 0x41, 0x00}, // (
        {0x00, 0x00, 0x41, 0x22, 0x1c, 0x00}, // )
        {0x00, 0x14, 0x08, 0x3E, 0x08, 0x14}, // *
        {0x00, 0x08, 0x08, 0x3E, 0x08, 0x08}, // +
        {0x00, 0x00, 0x00, 0xA0, 0x60, 0x00}, // ,
        {0x00, 0x08, 0x08, 0x08, 0x08, 0x08}, // -
        {0x00, 0x00, 0x60, 0x60, 0x00, 0x00}, // .
        {0x00, 0x20, 0x10, 0x08, 0x04, 0x02}, // /
        {0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
        {0x00, 0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
        {0x00, 0x42, 0x61, 0x51, 0x49, 0x46}, // 2
        {0x00, 0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
        {0x00, 0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
        {0x00, 0x27, 0x45, 0x45, 0x45, 0x39}, // 5
        {0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
        {0x00, 0x01, 0x71, 0x09, 0x05, 0x03}, // 7
        {0x00, 0x36, 0x49, 0x49, 0x49, 0x36}, // 8
        {0x00, 0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
        {0x00, 0x00, 0x36, 0x36, 0x00, 0x00}, // :
        {0x00, 0x00, 0x56, 0x36, 0x00, 0x00}, // ;
        {0x00, 0x08, 0x14, 0x22, 0x41, 0x00}, // <
        {0x00, 0x14, 0x14, 0x14, 0x14, 0x14}, // =
        {0x00, 0x00, 0x41, 0x22, 0x14, 0x08}, // >
        {0x00, 0x02, 0x01, 0x51, 0x09, 0x06}, // ?
        {0x00, 0x32, 0x49, 0x59, 0x51, 0x3E}, // @
        {0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C}, // A
        {0x00, 0x7F, 0x49, 0x49, 0x49, 0x36}, // B
        {0x00, 0x3E, 0x41, 0x41, 0x41, 0x22}, // C
        {0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C}, // D
        {0x00, 0x7F, 0x49, 0x49, 0x49, 0x41}, // E
        {0x00, 0x7F, 0x09, 0x09, 0x09, 0x01}, // F
        {0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
        {0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
        {0x00, 0x00, 0x41, 0x7F, 0x41, 0x00}, // I
        {0x00, 0x20, 0x40, 0x41, 0x3F, 0x01}, // J
        {0x00, 0x7F, 0x08, 0x14, 0x22, 0x41}, // K
        {0x00, 0x7F, 0x40, 0x40, 0x40, 0x40}, // L
        {0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F}, // M
        {0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
        {0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
        {0x00, 0x7F, 0x09, 0x09, 0x09, 0x06}, // P
        {0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
        {0x00, 0x7F, 0x09, 0x19, 0x29, 0x46}, // R
        {0x00, 0x46, 0x49, 0x49, 0x49, 0x31}, // S
        {0x00, 0x01, 0x01, 0x7F, 0x01, 0x01}, // T
        {0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
        {0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
        {0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F}, // W
        {0x00, 0x63, 0x14, 0x08, 0x14, 0x63}, // X
        {0x00, 0x07, 0x08, 0x70, 0x08, 0x07}, // Y
        {0x00, 0x61, 0x51, 0x49, 0x45, 0x43}, // Z
        {0x00, 0x00, 0x7F, 0x41, 0x41, 0x00}, // [
        {0x01, 0x06, 0x08, 0x30, 0x40, 0x00}, // ‘\’
        {0x00, 0x00, 0x41, 0x41, 0x7F, 0x00}, // ]
        {0x00, 0x04, 0x02, 0x01, 0x02, 0x04}, // ^
        {0x00, 0x40, 0x40, 0x40, 0x40, 0x40}, // _
        {0x00, 0x00, 0x01, 0x02, 0x04, 0x00}, // '
        {0x00, 0x20, 0x54, 0x54, 0x54, 0x78}, // a
        {0x00, 0x7F, 0x48, 0x44, 0x44, 0x38}, // b
        {0x00, 0x38, 0x44, 0x44, 0x44, 0x20}, // c
        {0x00, 0x38, 0x44, 0x44, 0x48, 0x7F}, // d
        {0x00, 0x38, 0x54, 0x54, 0x54, 0x18}, // e
        {0x00, 0x08, 0x7E, 0x09, 0x01, 0x02}, // f
        {0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C}, // g
        {0x00, 0x7F, 0x08, 0x04, 0x04, 0x78}, // h
        {0x00, 0x00, 0x44, 0x7D, 0x40, 0x00}, // i
        {0x00, 0x40, 0x80, 0x84, 0x7D, 0x00}, // j
        {0x00, 0x7F, 0x10, 0x28, 0x44, 0x00}, // k
        {0x00, 0x00, 0x41, 0x7F, 0x40, 0x00}, // l
        {0x00, 0x7C, 0x04, 0x18, 0x04, 0x78}, // m
        {0x00, 0x7C, 0x08, 0x04, 0x04, 0x78}, // n
        {0x00, 0x38, 0x44, 0x44, 0x44, 0x38}, // o
        {0x00, 0xFC, 0x24, 0x24, 0x24, 0x18}, // p
        {0x00, 0x18, 0x24, 0x24, 0x18, 0xFC}, // q
        {0x00, 0x7C, 0x08, 0x04, 0x04, 0x08}, // r
        {0x00, 0x48, 0x54, 0x54, 0x54, 0x20}, // s
        {0x00, 0x04, 0x3F, 0x44, 0x44, 0x20}, // t
        {0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C}, // u
        {0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C}, // v
        {0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C}, // w
        {0x00, 0x44, 0x28, 0x10, 0x28, 0x44}, // x
        {0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C}, // y
        {0x00, 0x44, 0x64, 0x54, 0x4C, 0x44}, // z
        {0x14, 0x14, 0x14, 0x14, 0x14, 0x14}, // horiz lines
    };
}